@page "/addcarspackages/{carId?}"
@rendermode InteractiveServer
@inject ICarService CarService
@inject ICarPackageService PackageService
@inject NavigationManager NavManager
@inject BusinessCheckService CheckService
@attribute [Authorize]

<h3>Create Package </h3>

@if (car == null)
{
    <p>Loading car details...</p>
}
else
{
    <div class="form-group">
        <label>Make</label>
        <input class="form-control" @bind="car.Make" disabled />
    </div>
    <div class="form-group">
        <label>Model</label>
        <input class="form-control" @bind="car.Model" disabled />
    </div>
    <div class="form-group">
        <label>Price</label>
        <input class="form-control" @bind="newPackage.Price" type="number" oninput="this.value=this.value.replace(/[^0-9 ]/g,'')" />
    </div>
    <div class="form-group">
        <label>Duration </label>
        <select id="fueltype" class="form-control" @bind="newPackage.Duration">
            <option value="">Select Duration </option>
            <option value="1 Hour">1 Hour</option>
            <option value="5 Hour">5 Hour</option>
            <option value="1 Day">1 Day</option>
            <option value="1 Week">1 Week</option>
            <option value="1 Month">1 Month</option>
        </select>
    </div>
    <div>
        <label for="With Driver" class="form-label">With Driver</label>
        <InputCheckbox id="With Driver" class="form-check-input" @bind-Value="newPackage.WithDriver" />
    </div>
    <button @onclick="CreatePackage" class="btn btn-primary">Save Package</button>
    <NavLink class="btn btn-secondary" href="/showcarpackages">
         Cancel
    </NavLink>
}

@code {
    [Parameter]
    public string carId { get; set; }

    private EntCar? car;
    private EntCarPackage newPackage = new();

    protected override async Task OnInitializedAsync()
    {
        if (await CheckService.CheckBusinessExists() && await CheckService.CheckUserAuthenticated())
        {
            car = await CarService.GetByIdAsync(carId);
            newPackage.CarId = carId;
        }
        else
        {
            NavManager.NavigateTo("/access-denied");
        }
    }

    private async Task CreatePackage()
    {

        newPackage.CarId = carId;
        newPackage.CarMake = car.Make;
        newPackage.CarImage = car.Image;
        newPackage.CarModel = car.Model;
        newPackage.BusinessId = await CheckService.GetBusinessIdAsync();
        await PackageService.CreateAsync(newPackage);
        NavManager.NavigateTo("/showcarpackages");
    }
}