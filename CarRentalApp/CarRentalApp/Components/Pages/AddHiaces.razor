@page "/addhiaces/{HiaceId?}"
@rendermode InteractiveServer
@inject IHiaceService ServiceHiace
@inject IImageUploadService ImageUploadServices
@inject NavigationManager NavManager
@inject BusinessCheckService CheckService
@attribute [Authorize]

<EditForm Model="HiaceModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <!-- Make Dropdown (Hardcoded) -->
    <div class="mb-3">
        <label class="form-label">Make</label>
        <select class="form-control" @bind="selectedMake">
            <option value="">--- Select Make ---</option>
            <option value="Toyota">Toyota</option>
            <option value="Nissan">Nissan</option>
            <option value="Mitsubishi">Mitsubishi</option>
            <option value="Hyundai">Hyundai</option>
            <option value="Kia">Kia</option>
            <option value="Hino">Hino</option>
            <option value="Isuzu">Isuzu</option>
            
        </select>
        <ValidationMessage For="@(() => HiaceModel.Make)" />
    </div>

    <!-- Model Dropdown -->
    <div class="mb-3">
        <label class="form-label">Model</label>
        <select class="form-control" @bind="selectedModel">
            <option value="">--- Select Model ---</option>
            @foreach (var model in filteredModels)
            {
                <option value="@model.Model">@model.Model</option>
            }
        </select>
        <ValidationMessage For="@(() => HiaceModel.Model)" />
    </div>

    <!-- Color Dropdown -->
    <div class="mb-3">
        <label class="form-label">Color</label>
        <select class="form-control" @bind="selectedColor">
            <option value="">--- Select Color ---</option>
            @foreach (var color in filteredColors)
            {
                <option value="@color.Color">@color.Color</option>
            }
        </select>
        <ValidationMessage For="@(() => HiaceModel.Color)" />
    </div>

    <!-- Year -->
    <div>
        <label for="year" class="form-label">Year</label>
        <InputNumber id="year" class="form-control" @bind-Value="HiaceModel.Year" oninput="this.value=this.value.replace(/[^0-9 ]/g,'')" />
        <ValidationMessage For="@(() => HiaceModel.Year)" />
        @if (!string.IsNullOrEmpty(YearError))
        {
            <div class="text-danger mt-1">@YearError</div>
        }
    </div>

    <!-- Registration Number -->
    <div class="mb-3">
        <label for="registration" class="form-label">Registration Number</label>
        <InputText id="registration" class="form-control" @bind-Value="HiaceModel.RegistrationNumber" placeholder=" ABC-123" />
        <ValidationMessage For="@(() => HiaceModel.RegistrationNumber)" />
    </div>

    <!-- Fuel Type -->
    <div class="mb-3">
        <label for="fueltype" class="form-label">Fuel Type</label>
        <select id="fueltype" class="form-control" @bind="HiaceModel.FuelType">
            <option value="">Select Fuel Type</option>
            <option value="Petrol">Petrol</option>
            <option value="Diesel">Diesel</option>
            <option value="Electric">Electric</option>
            <option value="Hybrid">Hybrid</option>
            <option value="CNG">CNG</option>
            <option value="LPG">LPG</option>
        </select>
    </div>

    <!-- Transmission -->
    <div class="mb-3">
        <label for="transmission" class="form-label">Transmission</label>
        <select id="transmission" class="form-control" @bind="HiaceModel.Transmission">
            <option value="">Select Transmission Type</option>
            <option value="Automatic">Automatic</option>
            <option value="Manual">Manual</option>
        </select>
    </div>

    <!-- Seating Capacity -->
    <div class="mb-3">
        <label for="seating" class="form-label">Seating Capacity</label>
        <InputText id="seating" class="form-control" @bind-Value="HiaceModel.SeatingCapacity" placeholder="eg.1,2,3" oninput="this.value=this.value.replace(/[^0-9 ]/g,'')" />
    </div>

    <!-- Cargo Capacity -->
    <div class="mb-3">
        <label for="cargo" class="form-label">Cargo Capacity</label>
        <InputText id="seating" class="form-control" @bind-Value="HiaceModel.CargoCapacityKg" placeholder="(Kg)" />
    </div>

    <!-- Description -->
    <div class="mb-3">
        <label for="description" class="form-label"> Hiace Description </label>
        <InputText id="description" class="form-control" @bind-Value=HiaceModel.HiaceDescription" placeholder="optional" />
    </div>

    <!-- Image -->
    <div class="mb-3">
        <label class="form-label">Hiace Image</label>
        <InputFile OnChange="HandleImageUpload" accept=".jpg,.jpeg,.png,.gif,.jfif" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }
  @if (!string.IsNullOrEmpty(HiaceModel.Image))
        {
            <img src="@HiaceModel.Image" width="100" class="mt-2" />
        }
    </div>

    <!-- Status -->
    <div class="mb-3 form-check">
        <InputCheckbox id="status" class="form-check-input" @bind-Value="HiaceModel.Status" />
        <label for="status" class="form-check-label">Is Available</label>
    </div>

    <!-- Carrier -->
    <div class="mb-3 form-check">
        <InputCheckbox id="carrier" class="form-check-input" @bind-Value="HiaceModel.WitCarrier" />
        <label for="carrier" class="form-check-label">With Carrier</label>
    </div>

    <!-- AC -->
    <div class="mb-3 form-check">
        <InputCheckbox id="hasac" class="form-check-input" @bind-Value="HiaceModel.IsAC" />
        <label for="hasac" class="form-check-label">Has AC</label>
    </div>

    <!-- Hiace Type -->
    <div class="mb-3">
        <label for="hiacetype" class="form-label">Hiace Type</label>
        <select id="hiacetype" class="form-control" @bind="HiaceModel.HiaceType">
            <option value="">Select Hiace Type</option>
            <option value="Mini-Van">Mini-Van</option>
            <option value="Luxury">Luxury</option>
            <option value="Cargo">Cargo</option>
            <option value="Passenger">Passenger</option>
        </select>
    </div>

    <!-- Buttons -->
    <div class="mb-3">
        <button type="submit" class="btn btn-primary me-2">@ButtonName</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">@CButtonName</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? HiaceId { get; set; }

    private string ButtonName = "";
    private string CButtonName = "";
    private EntHiace HiaceModel = new EntHiace();
    private EntHiaceDropDown dropdownData = new EntHiaceDropDown();

    // Filtered lists
    private List<EntHiaceModels> filteredModels = new List<EntHiaceModels>();
    private List<EntHiaceColors> filteredColors = new List<EntHiaceColors>();

    // Backing fields for two-way binding
    private string _selectedMake = "";
    private string _selectedModel = "";
    private string _selectedColor = "";

    protected override async Task OnInitializedAsync()
    {
        if (await CheckService.CheckBusinessExists() && await CheckService.CheckUserAuthenticated())
        {
            // Load dropdown data from JSON
            dropdownData = DalHiaceDropDown.GetAllDropdownData();

            if (HiaceId != null)
            {
                // Edit mode
                HiaceModel = await ServiceHiace.GetByIdAsync(HiaceId);
                ButtonName = "Update";
                CButtonName = "Cancel Update";

            }
            else
            {
                ButtonName = "Save Hiace";
                CButtonName = "Cancel";
            }
        }
        else
        {
            NavManager.NavigateTo("/access-denied");
        }
    }

    public string selectedMake
    {
        get => _selectedMake;
        set
        {
            _selectedMake = value;
            HiaceModel.Make = value;

            // Filter models based on make
            filteredModels = dropdownData.Models
                .Where(m => m.MakeId == value)
                .ToList();

            // Reset dependent dropdowns
            selectedModel = "";
            selectedColor = "";
            StateHasChanged();
        }
    }

    public string selectedModel
    {
        get => _selectedModel;
        set
        {
            _selectedModel = value;
            HiaceModel.Model = value;

            // Filter colors based on model
            filteredColors = dropdownData.Colors
                .Where(c => c.ModelId == value)
                .ToList();

            // Reset color selection
            selectedColor = "";
            StateHasChanged();
        }
    }

    public string selectedColor
    {
        get => _selectedColor;
        set
        {
            _selectedColor = value;
            HiaceModel.Color = value;
        }
    }


    public string YearError { get; set; } = string.Empty;

    private async Task HandleSubmit()
    {
        // Reset error message
        YearError = string.Empty;

        // Validate year
        if (HiaceModel.Year > DateTime.Now.Year)
        {
            YearError = $"Year cannot be after {DateTime.Now.Year}";
            return;
        }
        if (ButtonName == "Update")
        {
            await ServiceHiace.UpdateAsync(HiaceId!, HiaceModel);
        }
        else
        {
            HiaceModel.BusinessId = await CheckService.GetBusinessId();
            await ServiceHiace.CreateAsync(HiaceModel);
        }

        NavManager.NavigateTo("/showhiaces");



    }

    private string errorMessage = "";

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        errorMessage = "";
        try
        {
            HiaceModel.Image = await ImageUploadServices.UploadImageAsync(e.File, "hiaces");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void CancelEdit()
    {
        NavManager.NavigateTo("/showhiaces");
    }
}